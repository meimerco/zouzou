{"version":3,"sources":["components/map/Pin.js","api/content.js","components/map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Pin","data","position","name","Marker","icon","Icon","iconUrl","markerIconPng","iconSize","iconAnchor","Popup","getLocations","a","axios","get","res","mapStyle","width","height","Map","useState","locations","setLocations","useEffect","console","log","getData","MapContainer","center","zoom","scrollWheelZoom","style","TileLayer","attribution","url","map","location","_id","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAqBeA,MAjBf,YAA4C,IAAD,IAA5BC,KAAQC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KAC/B,OACE,cAACC,EAAA,EAAD,CACEF,SAAUA,EACVG,KACE,IAAIC,OAAK,CACPC,QAASC,IACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MANvB,SAUE,cAACC,EAAA,EAAD,UAAQR,O,iBCdDS,EAAY,uCAAG,4BAAAC,EAAA,4DAExB,0FAFwB,SAGRC,IAAMC,IADtB,2FAFwB,cAGpBC,EAHoB,yBAInBA,EAAIf,MAJe,2CAAH,qDCInBgB,EAAW,CACfC,MAAO,OACPC,OAAQ,QAkCKC,MA/Bf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAaA,OAZAC,qBAAU,WAUR,OATa,uCAAG,4BAAAX,EAAA,+EAEMD,IAFN,OAENI,EAFM,OAGZO,EAAaP,EAAIf,MAHL,gDAKZwB,QAAQC,IAAR,MALY,yDAAH,oDAQbC,GACO,kBAAMJ,EAAa,OACzB,IAED,eAACK,EAAA,EAAD,CACEC,OAAQ,CAAC,MAAO,QAChBC,KAAM,EACNC,iBAAiB,EACjBC,MAAOf,EAJT,UAME,cAACgB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELb,EAAUc,KAAI,SAACC,GAAD,OACb,cAAC,EAAD,CAAwBpC,KAAMoC,GAApBA,EAASC,YCzBZC,MATf,WACE,OACE,sBAAKC,UAAU,2BAAf,UACE,qBAAKA,UAAU,KAAf,mCACA,cAAC,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe7021cc.chunk.js","sourcesContent":["import { Marker, Popup } from \"react-leaflet\";\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\";\nimport { Icon } from \"leaflet\";\n\nfunction Pin({ data: { position, name } }) {\n  return (\n    <Marker\n      position={position}\n      icon={\n        new Icon({\n          iconUrl: markerIconPng,\n          iconSize: [25, 41],\n          iconAnchor: [12, 41],\n        })\n      }\n    >\n      <Popup>{name}</Popup>\n    </Marker>\n  );\n}\n\nexport default Pin;\n","import axios from \"axios\";\n\nexport const getLocations = async () => {\n  const url =\n    \"https://dev-c6165-1303259770.ap-shanghai.service.tcloudbase.com/external/v1.0/locations\";\n  const res = await axios.get(url);\n  return res.data;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Pin from \"./Pin\";\nimport { getLocations } from \"../../api/content\";\n\nconst mapStyle = {\n  width: \"80vw\",\n  height: \"80vh\",\n};\n\nfunction Map() {\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const res = await getLocations();\n        setLocations(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getData();\n    return () => setLocations([]);\n  }, []);\n  return (\n    <MapContainer\n      center={[31.23, 121.47]}\n      zoom={7}\n      scrollWheelZoom={true}\n      style={mapStyle}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {locations.map((location) => (\n        <Pin key={location._id} data={location} />\n      ))}\n    </MapContainer>\n  );\n}\nexport default Map;\n","import \"./App.css\";\nimport Map from \"./components/map/Map\";\n\nfunction App() {\n  return (\n    <div className=\"app flex-center flex-col\">\n      <div className=\"mt\">Depart from: Shanghai</div>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}